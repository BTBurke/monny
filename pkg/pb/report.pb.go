// Code generated by protoc-gen-go. DO NOT EDIT.
// source: report.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	report.proto

It has these top-level messages:
	Report
	ReportAck
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReportReason int32

const (
	ReportReason_Unknown        ReportReason = 0
	ReportReason_Success        ReportReason = 1
	ReportReason_Failure        ReportReason = 2
	ReportReason_Alert          ReportReason = 3
	ReportReason_AlertRate      ReportReason = 4
	ReportReason_MemoryWarning  ReportReason = 5
	ReportReason_TimeWarning    ReportReason = 6
	ReportReason_FileNotCreated ReportReason = 7
	ReportReason_Killed         ReportReason = 8
	ReportReason_Start          ReportReason = 9
)

var ReportReason_name = map[int32]string{
	0: "Unknown",
	1: "Success",
	2: "Failure",
	3: "Alert",
	4: "AlertRate",
	5: "MemoryWarning",
	6: "TimeWarning",
	7: "FileNotCreated",
	8: "Killed",
	9: "Start",
}
var ReportReason_value = map[string]int32{
	"Unknown":        0,
	"Success":        1,
	"Failure":        2,
	"Alert":          3,
	"AlertRate":      4,
	"MemoryWarning":  5,
	"TimeWarning":    6,
	"FileNotCreated": 7,
	"Killed":         8,
	"Start":          9,
}

func (x ReportReason) String() string {
	return proto.EnumName(ReportReason_name, int32(x))
}
func (ReportReason) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type KillReason int32

const (
	KillReason_NotKilled KillReason = 0
	KillReason_Timeout   KillReason = 1
	KillReason_Memory    KillReason = 2
	KillReason_Signal    KillReason = 3
)

var KillReason_name = map[int32]string{
	0: "NotKilled",
	1: "Timeout",
	2: "Memory",
	3: "Signal",
}
var KillReason_value = map[string]int32{
	"NotKilled": 0,
	"Timeout":   1,
	"Memory":    2,
	"Signal":    3,
}

func (x KillReason) String() string {
	return proto.EnumName(KillReason_name, int32(x))
}
func (KillReason) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Report struct {
	Id            string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Hostname      string       `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	Stdout        []string     `protobuf:"bytes,3,rep,name=stdout" json:"stdout,omitempty"`
	Stderr        []string     `protobuf:"bytes,4,rep,name=stderr" json:"stderr,omitempty"`
	Success       bool         `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
	MaxMemory     uint64       `protobuf:"varint,6,opt,name=max_memory,json=maxMemory" json:"max_memory,omitempty"`
	Killed        bool         `protobuf:"varint,7,opt,name=killed" json:"killed,omitempty"`
	KillReason    KillReason   `protobuf:"varint,8,opt,name=kill_reason,json=killReason,enum=wtf.monitor.KillReason" json:"kill_reason,omitempty"`
	Created       []byte       `protobuf:"bytes,9,opt,name=created,proto3" json:"created,omitempty"`
	ReportReason  ReportReason `protobuf:"varint,10,opt,name=report_reason,json=reportReason,enum=wtf.monitor.ReportReason" json:"report_reason,omitempty"`
	Start         int64        `protobuf:"varint,11,opt,name=start" json:"start,omitempty"`
	Finish        int64        `protobuf:"varint,12,opt,name=finish" json:"finish,omitempty"`
	Duration      string       `protobuf:"bytes,13,opt,name=duration" json:"duration,omitempty"`
	ExitCode      int32        `protobuf:"varint,14,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	ExitCodeValid bool         `protobuf:"varint,15,opt,name=exit_code_valid,json=exitCodeValid" json:"exit_code_valid,omitempty"`
	Messages      []string     `protobuf:"bytes,16,rep,name=messages" json:"messages,omitempty"`
	Matches       []byte       `protobuf:"bytes,17,opt,name=matches,proto3" json:"matches,omitempty"`
	UserCommand   string       `protobuf:"bytes,18,opt,name=user_command,json=userCommand" json:"user_command,omitempty"`
	Config        []byte       `protobuf:"bytes,19,opt,name=config,proto3" json:"config,omitempty"`
	CreatedAt     int64        `protobuf:"varint,20,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *Report) Reset()                    { *m = Report{} }
func (m *Report) String() string            { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()               {}
func (*Report) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Report) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Report) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Report) GetStdout() []string {
	if m != nil {
		return m.Stdout
	}
	return nil
}

func (m *Report) GetStderr() []string {
	if m != nil {
		return m.Stderr
	}
	return nil
}

func (m *Report) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Report) GetMaxMemory() uint64 {
	if m != nil {
		return m.MaxMemory
	}
	return 0
}

func (m *Report) GetKilled() bool {
	if m != nil {
		return m.Killed
	}
	return false
}

func (m *Report) GetKillReason() KillReason {
	if m != nil {
		return m.KillReason
	}
	return KillReason_NotKilled
}

func (m *Report) GetCreated() []byte {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Report) GetReportReason() ReportReason {
	if m != nil {
		return m.ReportReason
	}
	return ReportReason_Unknown
}

func (m *Report) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Report) GetFinish() int64 {
	if m != nil {
		return m.Finish
	}
	return 0
}

func (m *Report) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *Report) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *Report) GetExitCodeValid() bool {
	if m != nil {
		return m.ExitCodeValid
	}
	return false
}

func (m *Report) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *Report) GetMatches() []byte {
	if m != nil {
		return m.Matches
	}
	return nil
}

func (m *Report) GetUserCommand() string {
	if m != nil {
		return m.UserCommand
	}
	return ""
}

func (m *Report) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Report) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type ReportAck struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ReportAck) Reset()                    { *m = ReportAck{} }
func (m *ReportAck) String() string            { return proto.CompactTextString(m) }
func (*ReportAck) ProtoMessage()               {}
func (*ReportAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReportAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Report)(nil), "wtf.monitor.Report")
	proto.RegisterType((*ReportAck)(nil), "wtf.monitor.ReportAck")
	proto.RegisterEnum("wtf.monitor.ReportReason", ReportReason_name, ReportReason_value)
	proto.RegisterEnum("wtf.monitor.KillReason", KillReason_name, KillReason_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Reports service

type ReportsClient interface {
	Create(ctx context.Context, in *Report, opts ...grpc.CallOption) (*ReportAck, error)
}

type reportsClient struct {
	cc *grpc.ClientConn
}

func NewReportsClient(cc *grpc.ClientConn) ReportsClient {
	return &reportsClient{cc}
}

func (c *reportsClient) Create(ctx context.Context, in *Report, opts ...grpc.CallOption) (*ReportAck, error) {
	out := new(ReportAck)
	err := grpc.Invoke(ctx, "/wtf.monitor.Reports/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reports service

type ReportsServer interface {
	Create(context.Context, *Report) (*ReportAck, error)
}

func RegisterReportsServer(s *grpc.Server, srv ReportsServer) {
	s.RegisterService(&_Reports_serviceDesc, srv)
}

func _Reports_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Report)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wtf.monitor.Reports/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportsServer).Create(ctx, req.(*Report))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reports_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wtf.monitor.Reports",
	HandlerType: (*ReportsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Reports_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "report.proto",
}

func init() { proto.RegisterFile("report.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x4b, 0x4f, 0xdc, 0x3c,
	0x14, 0xc5, 0xf3, 0xc8, 0x4c, 0xee, 0x3c, 0x30, 0x06, 0xf1, 0xf9, 0xa3, 0xaa, 0x94, 0x22, 0xb5,
	0x8a, 0x58, 0xcc, 0x82, 0x2e, 0xda, 0x55, 0xd5, 0x29, 0x12, 0x1b, 0x54, 0x16, 0xa1, 0x8f, 0xe5,
	0xc8, 0x4d, 0xcc, 0x60, 0x4d, 0x62, 0x23, 0xdb, 0x29, 0xf4, 0xcf, 0xf4, 0xf7, 0xf5, 0x67, 0x54,
	0x7e, 0x64, 0x3a, 0x48, 0xec, 0xee, 0x39, 0x76, 0xce, 0xbd, 0xf7, 0xf8, 0x04, 0xa6, 0x9a, 0xdf,
	0x2b, 0x6d, 0x17, 0xf7, 0x5a, 0x59, 0x45, 0x26, 0x0f, 0xf6, 0x76, 0xd1, 0x28, 0x29, 0xac, 0xd2,
	0xa7, 0x7f, 0x06, 0x90, 0x14, 0xfe, 0x94, 0xcc, 0xa1, 0x27, 0x2a, 0x8a, 0x32, 0x94, 0xa7, 0x45,
	0x4f, 0x54, 0xe4, 0x04, 0xc6, 0x77, 0xca, 0x58, 0xc9, 0x1a, 0x4e, 0x7b, 0x9e, 0xdd, 0x62, 0x72,
	0x0c, 0x89, 0xb1, 0x95, 0x6a, 0x2d, 0xed, 0x67, 0xfd, 0x3c, 0x2d, 0x22, 0x8a, 0x3c, 0xd7, 0x9a,
	0x0e, 0xb6, 0x3c, 0xd7, 0x9a, 0x50, 0x18, 0x99, 0xb6, 0x2c, 0xb9, 0x31, 0x74, 0x98, 0xa1, 0x7c,
	0x5c, 0x74, 0x90, 0xbc, 0x04, 0x68, 0xd8, 0xe3, 0xaa, 0xe1, 0x8d, 0xd2, 0xbf, 0x68, 0x92, 0xa1,
	0x7c, 0x50, 0xa4, 0x0d, 0x7b, 0xfc, 0xec, 0x09, 0x27, 0xb8, 0x11, 0x75, 0xcd, 0x2b, 0x3a, 0xf2,
	0xdf, 0x45, 0x44, 0xde, 0xc3, 0xc4, 0x55, 0x2b, 0xcd, 0x99, 0x51, 0x92, 0x8e, 0x33, 0x94, 0xcf,
	0xcf, 0xff, 0x5b, 0xec, 0xac, 0xb6, 0xb8, 0x12, 0x75, 0x5d, 0xf8, 0xe3, 0x02, 0x36, 0xdb, 0xda,
	0x8d, 0x52, 0x6a, 0xce, 0x2c, 0xaf, 0x68, 0x9a, 0xa1, 0x7c, 0x5a, 0x74, 0x90, 0x7c, 0x80, 0x59,
	0x30, 0xaa, 0x53, 0x05, 0xaf, 0xfa, 0xff, 0x13, 0xd5, 0x60, 0x56, 0xd4, 0x8d, 0xc6, 0x46, 0xe5,
	0x23, 0x18, 0x1a, 0xcb, 0xb4, 0xa5, 0x93, 0x0c, 0xe5, 0xfd, 0x22, 0x00, 0xb7, 0xc1, 0xad, 0x90,
	0xc2, 0xdc, 0xd1, 0xa9, 0xa7, 0x23, 0x72, 0xf6, 0x56, 0xad, 0x66, 0x56, 0x28, 0x49, 0x67, 0xc1,
	0xde, 0x0e, 0x93, 0x17, 0x90, 0xf2, 0x47, 0x61, 0x57, 0xa5, 0xaa, 0x38, 0x9d, 0x67, 0x28, 0x1f,
	0x16, 0x63, 0x47, 0x5c, 0xa8, 0x8a, 0x93, 0x37, 0xb0, 0xbf, 0x3d, 0x5c, 0xfd, 0x64, 0xb5, 0xa8,
	0xe8, 0xbe, 0xf7, 0x66, 0xd6, 0x5d, 0xf9, 0xe6, 0x48, 0xd7, 0xa0, 0xe1, 0xc6, 0xb0, 0x35, 0x37,
	0x14, 0xfb, 0xd7, 0xd8, 0x62, 0x67, 0x42, 0xc3, 0x6c, 0x79, 0xc7, 0x0d, 0x3d, 0x08, 0x26, 0x44,
	0x48, 0x5e, 0xc1, 0xb4, 0x35, 0x5c, 0xaf, 0x4a, 0xd5, 0x34, 0x4c, 0x56, 0x94, 0xf8, 0xd1, 0x26,
	0x8e, 0xbb, 0x08, 0x94, 0xdb, 0xa8, 0x54, 0xf2, 0x56, 0xac, 0xe9, 0xa1, 0xff, 0x36, 0x22, 0xf7,
	0x94, 0xd1, 0xca, 0x15, 0xb3, 0xf4, 0xc8, 0x6f, 0x9b, 0x46, 0x66, 0x69, 0x4f, 0x5f, 0x43, 0x1a,
	0xcc, 0x5b, 0x96, 0x9b, 0xdd, 0x40, 0xa0, 0x27, 0x81, 0x38, 0xfb, 0x8d, 0x60, 0xba, 0x6b, 0x32,
	0x99, 0xc0, 0xe8, 0xab, 0xdc, 0x48, 0xf5, 0x20, 0xf1, 0x9e, 0x03, 0x37, 0xe1, 0x22, 0x46, 0x0e,
	0x5c, 0x32, 0x51, 0xb7, 0x9a, 0xe3, 0x1e, 0x49, 0x61, 0xb8, 0xac, 0xb9, 0xb6, 0xb8, 0x4f, 0x66,
	0x90, 0xfa, 0xb2, 0x60, 0x96, 0xe3, 0x01, 0x39, 0x80, 0x59, 0x48, 0xd3, 0x77, 0xa6, 0xa5, 0x90,
	0x6b, 0x3c, 0x24, 0xfb, 0x30, 0xf9, 0x22, 0x1a, 0xde, 0x11, 0x09, 0x21, 0x30, 0xbf, 0x14, 0x35,
	0xbf, 0x56, 0xf6, 0x22, 0x0c, 0x8c, 0x47, 0x04, 0x20, 0xb9, 0xf2, 0x69, 0xc3, 0x63, 0xa7, 0x7e,
	0xe3, 0x9e, 0x13, 0xa7, 0x67, 0x1f, 0x01, 0xfe, 0x45, 0xcb, 0xf5, 0xba, 0x56, 0x36, 0xde, 0xf3,
	0xf3, 0x39, 0x61, 0xd5, 0x5a, 0x8c, 0x9c, 0x40, 0x68, 0x8c, 0x7b, 0xae, 0xbe, 0x11, 0x6b, 0xc9,
	0x6a, 0xdc, 0x3f, 0xff, 0x04, 0xa3, 0xb0, 0xa1, 0x21, 0xef, 0x20, 0x09, 0x0d, 0xc9, 0xe1, 0x33,
	0x31, 0x3b, 0x39, 0x7e, 0x86, 0x5c, 0x96, 0x9b, 0xd3, 0xbd, 0x1f, 0x89, 0xff, 0x99, 0xdf, 0xfe,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x95, 0x71, 0x83, 0x97, 0xdc, 0x03, 0x00, 0x00,
}
